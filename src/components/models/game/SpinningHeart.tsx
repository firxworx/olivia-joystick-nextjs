/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: mano1creative (https://sketchfab.com/mano1creative)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/17cf0dbe4435434eb6e04394fd5bf7ae
title: Low Poly Spinning Heart!
*/

import * as THREE from 'three'
import React, { useEffect, useLayoutEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { BASE_URL } from 'src/constants/app'

const MODEL_FILE = `${BASE_URL}/assets/3d/models/game/spinning-heart.glb`

type GLTFResult = GLTF & {
  nodes: {
    Mesh_Default_0: THREE.Mesh
  }
  materials: {
    Default: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Take 001'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function SpinningHeart(props: JSX.IntrinsicElements['group']) {
  const groupRef = useRef<THREE.Group>()
  const meshRef = useRef<THREE.Mesh>()

  const { nodes, materials, animations } = useGLTF(MODEL_FILE) as GLTFResult
  const { actions, names } = useAnimations<GLTFActions>(animations, groupRef)

  const { position, ...restProps } = props
  // top group originally had {...props}

  const animationIndex = 0

  useLayoutEffect(() => {
    if (meshRef.current) {
      const sz = new THREE.Vector3()
      meshRef.current.geometry.computeBoundingBox()

      // note getSize() copies into the given Vector3
      // @see https://threejs.org/docs/#api/en/math/Box3.getSize
      meshRef.current.geometry?.boundingBox?.getSize(sz)

      console.log(sz)
    }
  }, [])

  useEffect(() => {
    // reset animations, fade-in, play
    actions[names[animationIndex] as ActionName]?.reset().fadeIn(0.5).play()

    return () => {
      // fade out in effect clean-up
      actions[names[animationIndex] as ActionName]?.fadeOut(0.5)
    }
  }, [actions, names, animationIndex])

  return (
    <group ref={groupRef} position={position} scale={[0.15, 0.15, 0.15]} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group name="Mesh" position={[0, 0.05, -0.1]}>
            <mesh ref={meshRef} geometry={nodes.Mesh_Default_0.geometry} material={materials.Default} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(MODEL_FILE)
export default SpinningHeart
