/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: HomoMilch (https://sketchfab.com/homomilk)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/3c6a3e8c4d0a4c4aaa5dfbbd91107aa4
title: Low Poly Mountain scene
*/

import * as THREE from 'three'
import React, { useRef, useMemo } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { BASE_URL } from 'src/constants/app'
import { useLoader } from '@react-three/fiber'
import { useConvexPolyhedron } from '@react-three/cannon'
import { threeToCannon } from 'three-to-cannon'

const MODEL_FILE = `${BASE_URL}/assets/3d/scenes/mountain-scene.glb`

type GLTFResult = GLTF & {
  nodes: {
    Plane_1: THREE.Mesh
    Plane_2: THREE.Mesh
    Plane_3: THREE.Mesh
    Plane_4: THREE.Mesh
    Plane_5: THREE.Mesh
    Plane_6: THREE.Mesh
    Plane_7: THREE.Mesh
    Plane_8: THREE.Mesh
    Plane_9: THREE.Mesh
    Plane_10: THREE.Mesh
    Plane_11: THREE.Mesh
    Plane_12: THREE.Mesh
    Plane_13: THREE.Mesh
    Plane_14: THREE.Mesh
    Plane_15: THREE.Mesh
    Plane_16: THREE.Mesh
    Plane_17: THREE.Mesh
    Plane_18: THREE.Mesh
    Plane_19: THREE.Mesh
    Plane_20: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
    ['Material.022']: THREE.MeshStandardMaterial
    ['Material.004']: THREE.MeshStandardMaterial
    ['Material.008']: THREE.MeshStandardMaterial
    ['Material.010']: THREE.MeshStandardMaterial
    ['Material.011']: THREE.MeshStandardMaterial
    ['Material.012']: THREE.MeshStandardMaterial
    ['Material.013']: THREE.MeshStandardMaterial
    ['Material.014']: THREE.MeshStandardMaterial
    ['Material.015']: THREE.MeshStandardMaterial
    ['Material.016']: THREE.MeshStandardMaterial
    ['Material.017']: THREE.MeshStandardMaterial
    ['Material.018']: THREE.MeshStandardMaterial
    ['Material.019']: THREE.MeshStandardMaterial
    ['Material.020']: THREE.MeshStandardMaterial
    ['Material.021']: THREE.MeshStandardMaterial
    ['Material.000']: THREE.MeshStandardMaterial
    ['Material.005']: THREE.MeshStandardMaterial
  }
}

/**
 * Returns legacy geometry vertices, faces for ConvP
 * @param {THREE.BufferGeometry} bufferGeometry
 * @link https://codesandbox.io/s/08s1u?file=/src/App.js:312-775
 */
// function toConvexProps(geo: THREE.BufferGeometry) {
//   // deprecated const geo = new Geometry().fromBufferGeometry(bufferGeometry)
//   // Merge duplicate vertices resulting from glTF export.
//   // Cannon assumes contiguous, closed meshes to work
//   // geo.mergeVertices()
//   return [geo.vertices.map((v) => [v.x, v.y, v.z]), geo.faces.map((f) => [f.a, f.b, f.c]), []]
// }

// https://github.com/schteppe/cannon.js/issues/444
// discussion on meshing this guy
// https://github.com/schteppe/cannon.js/issues/444

// https://github.com/jonsnow46/Labyrinth/blob/b3407ad093bec6bcb6f9f5ccf0a76c17d7d441d7/src/client/Maze.ts
// goes by name too

/*
            gltf.scene.traverse((child)=>{
                if(child.userData.ground){
                    console.log(threeToCannon(child))
                }
            })
*/

/*
//WIP here
const SceneMesh: React.FC<{ geometry: THREE.BufferGeometry; material: THREE.Material }> = ({ geometry, material }) => {
  const [ref] = useConvexPolyhedron(() => ({
    mass: 100,
    // ...props,
    args: geometry,
    onCollide: (e) => console.log('collision', e),
  }))

  return <mesh ref={ref} geometry={geometry} material={material} dispose={null} />
}
*/

export const MountainScenePhysics: React.FC = (props) => {
  const groupRef = useRef<THREE.Group>()

  const { nodes, materials } = useGLTF(MODEL_FILE) as GLTFResult // scene

  // later threejs gets rid of Geometry - only BufferGeometry
  // const geo = useMemo(() => new THREE.Geometry().fromBufferGeometry(nodes.), [nodes])

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group scale={[7.02, 7.02, 7.02]}>
          <mesh geometry={nodes.Plane_1.geometry} material={materials['Material.001']} />
          <mesh geometry={nodes.Plane_2.geometry} material={materials['Material.002']} />
          <mesh geometry={nodes.Plane_3.geometry} material={materials['Material.003']} />
          <mesh geometry={nodes.Plane_4.geometry} material={materials['Material.022']} />
          <mesh geometry={nodes.Plane_5.geometry} material={materials['Material.004']} />
          <mesh geometry={nodes.Plane_6.geometry} material={materials['Material.008']} />
          <mesh geometry={nodes.Plane_7.geometry} material={materials['Material.010']} />
          <mesh geometry={nodes.Plane_8.geometry} material={materials['Material.011']} />
          <mesh geometry={nodes.Plane_9.geometry} material={materials['Material.012']} />
          <mesh geometry={nodes.Plane_10.geometry} material={materials['Material.013']} />
          <mesh geometry={nodes.Plane_11.geometry} material={materials['Material.014']} />
          <mesh geometry={nodes.Plane_12.geometry} material={materials['Material.015']} />
          <mesh geometry={nodes.Plane_13.geometry} material={materials['Material.016']} />
          <mesh geometry={nodes.Plane_14.geometry} material={materials['Material.017']} />
          <mesh geometry={nodes.Plane_15.geometry} material={materials['Material.018']} />
          <mesh geometry={nodes.Plane_16.geometry} material={materials['Material.019']} />
          <mesh geometry={nodes.Plane_17.geometry} material={materials['Material.020']} />
          <mesh geometry={nodes.Plane_18.geometry} material={materials['Material.021']} />
          <mesh geometry={nodes.Plane_19.geometry} material={materials['Material.000']} />
          <mesh geometry={nodes.Plane_20.geometry} material={materials['Material.005']} />
        </group>
      </group>
    </group>
  )
}

export default function MountainScene(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF(MODEL_FILE) as GLTFResult // scene

  // scene.traverse((child) => {
  //   console.log(child)
  // })

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group scale={[7.02, 7.02, 7.02]}>
          <mesh geometry={nodes.Plane_1.geometry} material={materials['Material.001']} />
          <mesh geometry={nodes.Plane_2.geometry} material={materials['Material.002']} />
          <mesh geometry={nodes.Plane_3.geometry} material={materials['Material.003']} />
          <mesh geometry={nodes.Plane_4.geometry} material={materials['Material.022']} />
          <mesh geometry={nodes.Plane_5.geometry} material={materials['Material.004']} />
          <mesh geometry={nodes.Plane_6.geometry} material={materials['Material.008']} />
          <mesh geometry={nodes.Plane_7.geometry} material={materials['Material.010']} />
          <mesh geometry={nodes.Plane_8.geometry} material={materials['Material.011']} />
          <mesh geometry={nodes.Plane_9.geometry} material={materials['Material.012']} />
          <mesh geometry={nodes.Plane_10.geometry} material={materials['Material.013']} />
          <mesh geometry={nodes.Plane_11.geometry} material={materials['Material.014']} />
          <mesh geometry={nodes.Plane_12.geometry} material={materials['Material.015']} />
          <mesh geometry={nodes.Plane_13.geometry} material={materials['Material.016']} />
          <mesh geometry={nodes.Plane_14.geometry} material={materials['Material.017']} />
          <mesh geometry={nodes.Plane_15.geometry} material={materials['Material.018']} />
          <mesh geometry={nodes.Plane_16.geometry} material={materials['Material.019']} />
          <mesh geometry={nodes.Plane_17.geometry} material={materials['Material.020']} />
          <mesh geometry={nodes.Plane_18.geometry} material={materials['Material.021']} />
          <mesh geometry={nodes.Plane_19.geometry} material={materials['Material.000']} />
          <mesh geometry={nodes.Plane_20.geometry} material={materials['Material.005']} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(MODEL_FILE)
