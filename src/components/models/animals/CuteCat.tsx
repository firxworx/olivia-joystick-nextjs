/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Ladymito (https://sketchfab.com/ladymito)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/cat-8a7f5114c04a4aa191be634207609e8b
title: Cat
*/

import * as THREE from 'three'
import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import { BASE_URL } from 'src/constants/app'
import { Position3D } from 'src/types/3d/position'

const MODEL_FILE = `${BASE_URL}/assets/3d/models/animals/cutecat.glb`

type GLTFResult = GLTF & {
  nodes: {
    cat_gato_material_0: THREE.SkinnedMesh
    _rootJoint: THREE.Bone
  }
  materials: {
    gato_material: THREE.MeshStandardMaterial
  }
}

type ActionName =
  | 'idle'
  | 'cat_armature|cat_armatureAction'
  | 'cat_armature|idle'
  | 'cat_armature|miau'
  | 'cat_armature|sit'
  | 'cat_armature|sitting'
  | 'cat_armature|trout'
  | 'cat_armature|walk'

type GLTFActions = Record<ActionName, THREE.AnimationAction>

type ModelProps = JSX.IntrinsicElements['group'] & {
  position?: Position3D
}

export const CuteCat: React.FC<ModelProps> = (props) => {
  const groupRef = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF(MODEL_FILE) as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, groupRef)

  useEffect(() => {
    // actions['idle'].play()
    // actions['cat_armature|cat_armatureAction'].play()
    // actions['cat_armature|sitting'].play()
    // actions['cat_armature|walk'].play()
    actions['cat_armature|idle'].play()
  }, [actions])

  // const animationIndex = 0
  // useEffect(() => {
  //   // reset animations, fade-in, play
  //   actions[names[animationIndex]].reset().fadeIn(0.5).play()

  //   // fade out in clean-up phase
  //   return () => {
  //     actions[names[animationIndex]].fadeOut(0.5)
  //   }
  // }, [actions, names, animationIndex])

  return (
    <group ref={groupRef} position={props.position ?? [0, 0, 0]} dispose={null} scale={[0.05, 0.05, 0.05]} {...props}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group position={[2.01, -1.75, -0.08]} rotation={[0, 0, -Math.PI / 2]}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <group name="cat_armature" rotation={[-Math.PI / 2, 0, 0]} scale={[100, 100, 100]}>
              <primitive object={nodes._rootJoint} />
              <skinnedMesh
                geometry={nodes.cat_gato_material_0.geometry}
                material={materials.gato_material}
                skeleton={nodes.cat_gato_material_0.skeleton}
              />
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(MODEL_FILE)

export default CuteCat
